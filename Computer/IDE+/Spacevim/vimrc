"=============================================================================
" vimrc --- Entry file for vim
" Copyright (c) 2016-2020 Shidong Wang & Contributors
" Author: Shidong Wang < wsdjeg@outlook.com >
" URL: https://spacevim.org
" License: GPLv3
"=============================================================================

" Note: Skip initialization for vim-tiny or vim-small.
if 1
    let g:_spacevim_if_lua = 0
    if has('lua')
        if has('win16') || has('win32') || has('win64')
            let s:plugin_dir = fnamemodify(expand('<sfile>'), ':h').'\lua'
            let s:str = s:plugin_dir . '\?.lua;' . s:plugin_dir . '\?\init.lua;'
        else
            let s:plugin_dir = fnamemodify(expand('<sfile>'), ':h').'/lua'
            let s:str = s:plugin_dir . '/?.lua;' . s:plugin_dir . '/?/init.lua;'
        endif
        silent! lua package.path=vim.eval("s:str") .. package.path
        if empty(v:errmsg)
            let g:_spacevim_if_lua = 1
        endif
    endif
    execute 'source' fnamemodify(expand('<sfile>'), ':h').'/config/main.vim'
endif
" vim:set et sw=2

let mapleader=" "

map <LEADER>0  $
map <LEADER>f  <C-f>
map <LEADER>b  <C-b>
map <LEADER>p  <C-p>
map <LEADER>w  <C-w>
"noremap tn :NERDTree<CR>
"noremap tt :Tagbar<CR>
"noremap tr :source %<CR>
noremap tm :MarkdownPreview<CR>

"set nu
syntax on
exec "nohlsearch"
set nofoldenable
set smartcase
set ci
set sm
" set relativenumber

"光标不同显示
let &t_ut=''
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

set expandtab
set tabstop=2
set shiftwidth=4
set softtabstop=2
set laststatus=2
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

set clipboard=unnamed
set si
set ttimeoutlen=100
filetype on
filetype plugin on
filetype indent on
filetype plugin indent on 
set autoread

"通过使用: commands命令，告诉我们文件的哪一行被改变过"
set report=0

"被分割的窗口间显示空白，便于阅读"
set fillchars=vert:\ ,stl:\ ,stlnc:\
set smarttab
set autoindent

"自动换行”
set wrap

"增强模式中的命令行自动完成操作"
set wildmenu

"显示标尺"
set ruler

"使回格键（backspace）正常处理indent, eol, start等"
set backspace=eol,start,indent

"允许空格键和光标键跨越行边界"
"set whichwrap+=<,>,h,l

"高亮显示匹配的括号([{和}])"
set showmatch

"光标移动到buffer的顶部和底部时保持3行距离"
set scrolloff=5
highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
set hlsearch
set incsearch
set ignorecase

"用浅色高亮显示当前行"
"竖
set nocursorcolumn 
"横
set cursorline
autocmd InsertLeave * se cul
autocmd InsertEnter * se nocul

"highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

"cterm 表示为原生vim设置样式，设置为NONE表示可以自定义设置。
"ctermbg 设置终端vim的背景色
"ctermfg 设置终端vim的前景色
"guibg 和 guifg 分别是设置gvim的背景色和前景色

set showcmd
"开启新行时使用智能自动缩进"
set smartindent
set cin
set showmatch
"文件类型自动检测，代码智能补全"
set completeopt=longest,preview,menu

set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
"设置文件编码"
set fileencodings=utf-8
"设置终端编码"
set termencoding=utf-8
"设置语言编码"
set langmenu=zh_CN.UTF-8
set helplang=cn
"显示中文帮助"

if version >= 603
        set helplang=cn
            set encoding=utf-8
endif
 
function! Align_Space()
    let current_line = getline('.')

    let replacement = substitute(current_line,'\([a-zA-Z0-9_]\)\([!|^&=<>%*/+-]\)','\1 \2','g')
    let newline = substitute(replacement,'\([!|^&=<>%*/+-]\)\([a-zA-Z0-9_]\)','\1 \2','g')
    let replacement = substitute(newline,'\([^&]\)\(\s*\)\(&\)\s*\([a-zA-Z0-9_]\)','\1 \3\4','g')
    let newline = substitute(replacement,'\s\+->\s\+','->','g')

    let replacement = newline

    if '"' == matchstr(replacement,'"')
        let newline = substitute(replacement,'\s\+%\s\+','%','g')
    else
        let newline = replacement
    endif

    call setline('.',newline)

    if newline != current_line
        call cursor(line('.'),col('.') + 1)
    endif
endfunction
autocmd CursorMovedI *.[ch] call Align_Space()


"let g:neocomplete#enable_at_startup = 0
"let g:deoplete#enable_at_startup = 1

"call vebugger#gdb#start('a.out',{'args':['hello','world']})

